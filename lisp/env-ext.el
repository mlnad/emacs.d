;;; env-ext.el --- envvar file generator -*- lexical-binding: t; -*-
;;; Commentary:
;;; Code:
(defvar denied-env-list
  '(;; Unix/shell state that shouldn't be persisted
    "^HOME$" "^\\(OLD\\)?PWD$" "^SHLVL$" "^PS1$" "^R?PROMPT$" "^TERM\\(CAP\\)?$"
    "^USER$" "^INSIDE_EMACS$"
    ;; X server, Wayland, or services' env  that shouldn't be persisted
    "^DISPLAY$" "^WAYLAND_DISPLAY" "^DBUS_SESSION_BUS_ADDRESS$" "^XAUTHORITY$"
    ;; Windows+WSL envvars that shouldn't be persisted
    "^WSL_INTEROP$"
    ;; XDG variables that are best not persisted.
    "^XDG_CURRENT_DESKTOP$" "^XDG_RUNTIME_DIR$"
    "^XDG_\\(VTNR\\|SEAT\\|SESSION_\\(TYPE\\|CLASS\\)\\)"
    ;; Socket envvars, like I3SOCK, GREETD_SOCK, SEATD_SOCK, SWAYSOCK, etc.
    "SOCK$"
    ;; ssh and gpg variables that could quickly become stale if persisted.
    "^SSH_\\(AUTH_SOCK\\|AGENT_PID\\)$" "^\\(SSH\\|GPG\\)_TTY$"
    "^GPG_AGENT_INFO$"
    ;; Internal Doom envvars
    "^DEBUG$" "^INSECURE$" "^__"))

(defun generate-env-file (file)
  "Generate enviroment FILE."
  (let ((env-file file))
    (with-temp-file env-file
      (setq-local coding-system-for-write 'utf-8)
      (goto-char (point-min))
      (insert
       ";; -*- mode: lisp-interaction; coding: utf-8-unix; -*-\n"
       ";; ---------------------------------------------------------------------------\n"
       ";; This file was auto-generated by emacs. It contains a list of environment\n"
       ";; variables scraped from your default shell.\n"
       ";;\n"
       ";; DO NOT EDIT THIS FILE!\n"
       ";;\n")
      (insert "(")
      (dolist (env (default-toplevel-value 'process-environment))
        (catch 'skip
          (let* ((var (car (split-string env "="))))
            (when (seq-find (lambda (pred) (string-match-p pred var)) denied-env-list)
              (throw 'skip t)))
          (insert (prin1-to-string env) "\n ")))
      (insert ")"))
    t))

(defun load-env-file (file &optional noerror)
  "Readand set enviroment from FILE."
  (if (null (file-exists-p file))
      (unless noerror
        (signal 'file-error (list "No env file" file)))
    (with-temp-buffer
      (insert-file-contents file)
      (when-let (env (read (current-buffer)))
        (setq-default
         process-environment
         (append env (default-value 'process-environment))
         exec-path
         (append (split-string (getenv "PATH") path-separator t)
                 (list exec-directory))
         shell-file-name
         (or (getenv "SHELL")
             (default-value 'shell-file-name)))
        env))))

(provide 'env-ext)
;;; env.el ends here
